configfile: "config.yaml"

rule all:
      input:
        expand("{sample}.sam", sample=config['SAMPLES']),
        expand("{sample}.bam", sample=config['SAMPLES']),
        expand("{sample}.sorted.bam", sample =config['SAMPLES']),
        expand("{cohort}_regions.txt", cohort = config['COHORT']),
        expand("{sample}.bamcounts", sample=config['SAMPLES']),
        expand("{sample}_alleles.txt", sample=config['SAMPLES']),
        expand("{sample}_estimates.txt", sample=config['SAMPLES']), 
        expand("{sample}_estimates.txt", sample=config['SAMPLES'])
 
rule index_fai:
     input:
        expand("{genome}.fasta", genome = config['GENOME']),
     params:
        config['GENOME']
     log: "logs/index.log"
     benchmark: "logs/index.benchmark"
     conda: 'env/env-align.yaml'
     threads: 8
     output:
        expand("{genome}.fasta.fai", genome = config['GENOME']),
     shell: 
        "samtools faidx {input}"

rule index:
     input: 
        expand("{genome}.fasta", genome = config['GENOME']),
     params: 
        config['GENOME'] 
     log: "logs/index.log"
     benchmark: "logs/index.benchmark"
     conda: 'env/env-align.yaml'
     threads: 8 
     output:
        expand("{genome}.rev.1.bt2", genome = config['GENOME']), 
        expand("{genome}.rev.2.bt2", genome = config['GENOME']),
        expand("{genome}.1.bt2", genome = config['GENOME']),
        expand("{genome}.2.bt2", genome = config['GENOME']),
        expand("{genome}.3.bt2", genome = config['GENOME']),
        expand("{genome}.4.bt2", genome = config['GENOME'])
     shell: 
         """
          bowtie2-build {input} {params} --threads 8
         """ 
"""
rule trim: 
    input: 
       r1 = "{sample}.r_1.fq.gz",
       r2 = "{sample}.r_2.fq.gz"
    log: "logs/{sample}.trim.log"
    benchmark: "logs/{sample}.trim.benchmark" 
    conda :'env/env-trim.yaml' 
    output: 
      val1 = "galore/{sample}.r_1_val_1.fq.gz",
      val2 = "galore/{sample}.r_2_val_2.fq.gz"
    shell: 
         mkdir -p galore
         mkdir -p fastqc
         trim_galore --gzip --retain_unpaired --trim1 --fastqc --fastqc_args "--outdir fastqc" -o galore --paired {input.r1} {input.r2}
"""
rule trim: 
     input: 
       r1 = "{sample}.r_1.fq.gz",
       r2 = "{sample}.r_2.fq.gz" 
     log: "logs/{sample}.trim.log"
     benchmark: "logs/{sample}.trim.benchmark"
     conda :'env/env-trim.yaml'
     output:
         val1 = "fastp/{sample}.r_1_val_1.fq.gz",
         val2 = "fastp/{sample}.r_2_val_2.fq.gz",
         html = "fastp/{sample}.quality.html"
     shell:
         """
          mkdir -p fastp 
          fastp --in1 {input.r1} --in2 {input.r2} --out1 {output.val1} --out2 {output.val2} -l 50 -h {output.html} -g &> {log}

         """

rule tosam:
    input:
        expand("{genome}.fasta.fai", genome = config['GENOME']),
        expand("{genome}.rev.1.bt2", genome = config['GENOME']),
        expand("{genome}.rev.2.bt2", genome = config['GENOME']),
        expand("{genome}.1.bt2", genome = config['GENOME']),
        expand("{genome}.2.bt2", genome = config['GENOME']),
        expand("{genome}.3.bt2", genome = config['GENOME']),
        expand("{genome}.4.bt2", genome = config['GENOME']),
        r1 = "fastp/{sample}.r_1_val_1.fq.gz",
        r2 = "fastp/{sample}.r_2_val_2.fq.gz"
    params:
        genome = config['GENOME']
    threads: 4
    log: "logs/{sample}.align.log"
    benchmark: "logs/{sample}.tosam.benchmark"
    conda: 'env/env-align.yaml' 
    output:
        "{sample}.sam"
    shell:
        "bowtie2 -x {params.genome} -1 {input.r1} -2 {input.r2} -S {output} -p 4"

rule tobam: 
      input:
          "{sample}.sam"
      output:
          "{sample}.bam",
      shell:
         """
           samtools view -S -b {input} > {output[0]}
         """


rule sort:
       input:
            "{sample}.bam"
       output:
            "{sample}.sorted.bam"
       params:
            "{sample}.tmp.sorted"
       log:
            "{sample}.sorted.log"
       conda: 'env/env-align.yaml'
       shell:
            """
                samtools sort -T {params} -o {output} {input}
                samtools index {output} 
            """


rule filter_vcf: 
     input: 
         references = config['REF_VCF']
     params: 
         cohort = config['COHORT'],
         n = config['N'] 
     output: 
         expand("{cohort}_regions.txt", cohort = config['COHORT'])
     shell: 
         """
         Rscript {config[SRC]}/1.Create_region_list_bam-readcount.R {input}  {output}
         """ 

rule bam_count: 
      input: 
         "{sample}.sorted.bam",
         expand("{cohort}_regions.txt", cohort = config['COHORT'])
      output: 
         "{sample}.bamcounts"
      params: 
          genome =config['GENOME'],
          depth="1000000000",
          read_quality="30", 
      shell:
         """
          bam-readcount -w 1 -d {params.depth} -q {params.read_quality}  -f {params.genome}.fasta -l {input[1]}  {input[0]} >  {output} 
         """

rule estimate_MAF:
      input: 
         bamcounts = "{sample}.bamcounts",
         vcf = expand("{genome}.vcf", genome =config['COHORT']),
      output:
         "{sample}_alleles.txt", 
         "{sample}_genotypes.txt" 
      shell: 
         """
         Rscript {config[SRC]}/2.Bam-readcount_to_MAF_estimate.R {input.bamcounts} {input.vcf} {output[0]}  {output[1]}
         """ 

rule run_estimator: 
      input: 
        "{sample}_alleles.txt", 
        "{sample}_genotypes.txt"
      output: 
        "{sample}_estimates.txt"
      shell: 
          """
          Rscript {config[SRC]}/estimate_weights.R {input[0]} {input[1]} {output} 
          """


rule check_quality: 
      input:
        "{sample}.sorted.bam" 
      output:
        "{sample}_quality.txt"
      shell: 
          """ 
          samtools view {input} | awk '{{if($5<5) {{print $0}}}}'  | wc -l >  {output}
          samtools view {input} | awk '{{if($5>=5) {{print $0}}}}' | wc -l >> {output}
          """ 

rule check_contaminate: 
     input: 
         "{sample}.r_1.fq.gz"
     output: 
         "{sample}_screen.txt" 
     params: 
         CONF=config['CONF'] 
     shell: 
        """
         fastq_screen --conf {params.CONF} {input}
         
        """

rule GCBias:
   input:
      "{sample}.sorted.bam",
   params:
      genome=config['GENOME']
   output:
      "{sample}.gc_bias_metrics.txt",
      "{sample}.gc_bias_metrics.pdf",
      "{sample}.summary_metrics.txt"
   shell:
       """
       picard CollectGcBiasMetrics I={input} O={output[0]} CHART={output[1]} \
       S={output[2]} R={params}.fasta
       """

rule CollectAlignmentSummaryMetrics: 
   input:
      "{sample}.sorted.bam",
   params:
      genome=config['GENOME']
   output:
      "{sample}.alignment_metrics.txt"
   shell:
       """
       picard CollectAlignmentSummaryMetrics I={input} O={output[0]} R={params}.fasta
       """

rule CoverageHistogram: 
    input: 
      "{sample}.sorted.bam",
    output: 
       "{sample}.coverage.histogram"
    shell: 
      """
      samtools coverage {input}  --histogram  -o {output}
      """

rule CountDuplicates: 
     input: 
         "{sample}.sorted.bam",
     output: 
          "{sample}.dedup.bam",
          "{sample}.duplicatestats.txt"
     shell: 
         """
         samtools markdup  {input} {output[0]} -f {output[1]} 
         """

rule InsertSize: 
    input: 
       "{sample}.sorted.bam"
    output: 
       "{sample}.insert_size_metrics.txt", 
       "{sample}_insert_size_histogram.pdf"
    shell:  
       """
        picard CollectInsertSizeMetrics I={input} O={output[0]} H={output[1]} M=0.5
      """


rule WGSMetrics:
    input: 
      "{sample}.sorted.bam"
    params: 
       genome=config['GENOME'],
       min_base_quality = config['MIN_BASE_QUALITY'] 
    output: 
       "{sample}.5.wgs_metrics.txt"
    shell: 
        """ 
        picard CollectWgsMetrics I={input} O={output} R={params.genome}.fasta Q={params.min_base_quality} 
        """ 
